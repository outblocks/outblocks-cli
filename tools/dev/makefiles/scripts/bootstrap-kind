#!/bin/bash -e
#
# Adapted from:
# https://github.com/kubernetes-sigs/kind/commits/master/site/static/examples/kind-with-registry.sh
#
# Copyright 2020 The Kubernetes Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

CLUSTER_NAME="${CLUSTER_NAME:-local}"
K8S_VERSION="${K8S_VERSION:-1.17.17}"
HOST_PORT="${HOST_PORT:-80}"

kind_network='kind'
reg_name='kind-registry'
reg_port='5000'

cluster_running="$(kind get clusters | grep "${CLUSTER_NAME}" || true)"
if [ "${cluster_running}" == "${CLUSTER_NAME}" ]; then
  exit 0
fi

# create registry container unless it already exists
registry_running="$(docker inspect -f '{{.State.Running}}' "${reg_name}" 2>/dev/null || true)"
if [ "${registry_running}" != 'true' ]; then
  docker run \
    -d --restart=always -p "${reg_port}:5000" --name "${reg_name}" \
    registry:2 &>/dev/null
fi

# create a cluster with the local registry enabled in containerd
cat <<EOF | kind create cluster --name "${CLUSTER_NAME}" --config=-
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
  - role: control-plane
    image: kindest/node:v${K8S_VERSION}
    extraPortMappings:
      - containerPort: 80
        hostPort: ${HOST_PORT}
        listenAddress: "0.0.0.0"
containerdConfigPatches:
- |-
  [plugins."io.containerd.grpc.v1.cri".registry.mirrors."localhost:${reg_port}"]
    endpoint = ["http://${reg_name}:5000"]
EOF

cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: ConfigMap
metadata:
  name: local-registry-hosting
  namespace: kube-public
data:
  localRegistryHosting.v1: |
    host: "localhost:${reg_port}"
    help: "https://kind.sigs.k8s.io/docs/user/local-registry/"
EOF

network_connected=$(docker network inspect ${kind_network} -f "{{range .Containers}}{{.Name}} {{end}}" | grep ${reg_name} || true)
if [ "${network_connected}" != "${reg_name}" ]; then
  docker network connect "${kind_network}" "${reg_name}" || true
fi
